input AddItemInput {
  modelName: String!
  state: String!
  clientMutationId: String!
}

type AddItemPayload {
  viewer: Viewer
  itemEdge: ItemType
  clientMutationId: String!
}

input AddModelInput {
  brandName: String!
  name: String!
  clientMutationId: String!
}

type AddModelPayload {
  viewer: Viewer
  modelEdge: ModelTypeEdge
  clientMutationId: String!
}

type BrandType implements Node {
  id: ID!
  name: String
  description: String
}

type CategoryType implements Node {
  id: ID!
  name: String
  description: String
}

type DomainType implements Node {
  id: ID!
  name: String
  description: String
}

type ItemCommentType implements Node {
  id: ID!
  text: String
  createdAt: String
  updatedAt: String
}

type ItemCommentTypeConnection {
  pageInfo: PageInfo!
  edges: [ItemCommentTypeEdge]
}

type ItemCommentTypeEdge {
  node: ItemCommentType
  cursor: String!
}

type ItemType implements Node {
  id: ID!
  model: ModelType
  reference: String
  isInStock: Boolean
  comments(after: String, first: Int, before: String, last: Int): ItemCommentTypeConnection
}

type ItemTypeConnection {
  pageInfo: PageInfo!
  edges: [ItemTypeEdge]
}

type ItemTypeEdge {
  node: ItemType
  cursor: String!
}

type ModelType implements Node {
  id: ID!
  name: String
  description: String
  brand: BrandType
  domains: [DomainType]
  subCategories: [SubCategoryType]
}

type ModelTypeConnection {
  pageInfo: PageInfo!
  edges: [ModelTypeEdge]
}

type ModelTypeEdge {
  node: ModelType
  cursor: String!
}

type Mutation {
  addModel(input: AddModelInput!): AddModelPayload
  addItem(input: AddItemInput!): AddItemPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Root {
  viewer: Viewer
  node(id: ID!): Node
}

type SubCategoryType implements Node {
  id: ID!
  name: String
  description: String
  category: CategoryType
}

type Viewer implements Node {
  id: ID!
  items(after: String, first: Int, before: String, last: Int): ItemTypeConnection
  item(reference: String!): ItemType
  brands: [BrandType]
  models(after: String, first: Int, before: String, last: Int): ModelTypeConnection
  domains: [DomainType]
  subCategories: [SubCategoryType]
  categories: [CategoryType]
}
