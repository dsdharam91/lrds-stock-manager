input AddEventInput {
  name: String!
  startDate: String!
  endDate: String!
  description: String
  itemsReference: [String]
  clientMutationId: String!
}

type AddEventPayload {
  viewer: Viewer
  eventEdge: EventTypeEdge
  clientMutationId: String!
}

input AddItemInCartInput {
  viewerId: Int!
  itemReference: String!
  clientMutationId: String!
}

type AddItemInCartPayload {
  viewer: Viewer
  cart: CartType
  clientMutationId: String!
}

input AddItemInput {
  modelName: String!
  severity: String!
  domains: [String]
  subCategories: [String]
  clientMutationId: String!
}

type AddItemPayload {
  viewer: Viewer
  itemEdge: ItemTypeEdge
  clientMutationId: String!
}

input AddModelInput {
  brandName: String!
  name: String!
  clientMutationId: String!
}

type AddModelPayload {
  viewer: Viewer
  modelEdge: ModelTypeEdge
  clientMutationId: String!
}

type BrandType implements Node {
  id: ID!
  name: String
  description: String
}

type CartType implements Node {
  id: ID!
  count: Int
  selectedItems: [ItemType]
}

type CategoryType implements Node {
  id: ID!
  name: String
  description: String
}

type DomainType implements Node {
  id: ID!
  name: String
  description: String
}

input EmptyCartInput {
  viewerId: String!
  clientMutationId: String!
}

type EmptyCartPayload {
  viewer: Viewer
  cart: CartType
  clientMutationId: String!
}

type EventCommentsTypeConnection {
  pageInfo: PageInfo!
  edges: [EventCommentsTypeEdge]
}

type EventCommentsTypeEdge {
  node: ItemCommentType
  cursor: String!
}

type EventItemsTypeConnection {
  pageInfo: PageInfo!
  edges: [EventItemsTypeEdge]
}

type EventItemsTypeEdge {
  node: ItemType
  cursor: String!
}

type EventType implements Node {
  id: ID!
  name: String
  description: String
  startDate: String
  endDate: String
  comments(after: String, first: Int, before: String, last: Int): EventCommentsTypeConnection
  reservedItems(after: String, first: Int, before: String, last: Int): EventItemsTypeConnection
}

type EventTypeConnection {
  pageInfo: PageInfo!
  edges: [EventTypeEdge]
}

type EventTypeEdge {
  node: EventType
  cursor: String!
}

type ItemCommentType implements Node {
  id: ID!
  text: String
  createdAt: String
  updatedAt: String
}

type ItemCommentTypeConnection {
  pageInfo: PageInfo!
  edges: [ItemCommentTypeEdge]
}

type ItemCommentTypeEdge {
  node: ItemCommentType
  cursor: String!
}

type ItemType implements Node {
  id: ID!
  model: ModelType
  reference: String
  state: StateType
  isInStock: Boolean
  comments(after: String, first: Int, before: String, last: Int): ItemCommentTypeConnection
}

type ItemTypeConnection {
  pageInfo: PageInfo!
  edges: [ItemTypeEdge]
}

type ItemTypeEdge {
  node: ItemType
  cursor: String!
}

type ModelType implements Node {
  id: ID!
  name: String
  description: String
  brand: BrandType
  domains: [DomainType]
  subCategories: [SubCategoryType]
}

type ModelTypeConnection {
  pageInfo: PageInfo!
  edges: [ModelTypeEdge]
}

type ModelTypeEdge {
  node: ModelType
  cursor: String!
}

type Mutation {
  addModel(input: AddModelInput!): AddModelPayload
  addItem(input: AddItemInput!): AddItemPayload
  addItemInCart(input: AddItemInCartInput!): AddItemInCartPayload
  removeItemFromCart(input: RemoveItemFromCartInput!): RemoveItemFromCartPayload
  emptyCart(input: EmptyCartInput!): EmptyCartPayload
  addEvent(input: AddEventInput!): AddEventPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input RemoveItemFromCartInput {
  viewerId: Int!
  itemReference: String!
  clientMutationId: String!
}

type RemoveItemFromCartPayload {
  viewer: Viewer
  cart: CartType
  clientMutationId: String!
}

type Root {
  viewer(viewerId: Int!): Viewer
  node(id: ID!): Node
}

type StateType implements Node {
  id: ID!
  name: String
  severity: Int
}

type SubCategoryType implements Node {
  id: ID!
  name: String
  description: String
  category: CategoryType
}

type UserType implements Node {
  id: ID!
  firstName: String
  lastName: String
  login: String
  email: String
  enabled: Boolean
}

type Viewer implements Node {
  id: ID!
  user: UserType
  items(after: String, first: Int, before: String, last: Int): ItemTypeConnection
  item(reference: String!): ItemType
  events(after: String, first: Int, before: String, last: Int): EventTypeConnection
  brands: [BrandType]
  models(after: String, first: Int, before: String, last: Int): ModelTypeConnection
  domains: [DomainType]
  subCategories: [SubCategoryType]
  categories: [CategoryType]
  states: [StateType]
  countNextItemId(itemReference: String!): Int
  cart(viewerId: String!): CartType
}
